<section class="events-carousel">
    
    <h2 class="gh-section-title" style="text-align: center; margin-bottom: 1.5rem; color: var(--text-color);">
    Upcoming Events
    </h2>
    <hr class="section-divider">
    <a href="{{@site.url}}/events" class="carousel-link-wrapper">
        <div class="carousel-track-container">
            <div class="carousel-track" id="eventCarouselTrack"></div>
        </div>
    </a>

  <!-- for testing of handlebars replacement and theme variables
  <p>{{@custom.events_api_url}} /events/upcoming?token={{@custom.events_token}} {{@custom.events_tags}} </p>
<div class="test-div"></div>
-->


</section>

<style>

.events-carousel {
    overflow: hidden;
    width: 100%;
    max-width: 960px;
    margin: 2rem auto;
}

.carousel-link-wrapper {
    display: block;
    text-decoration: none;
    color: inherit;
}

.carousel-link-wrapper:hover {
    cursor: pointer;
}

.carousel-track-container {
    overflow: hidden;
    position: relative;
}
.carousel-track {
    display: flex;
    transition: transform 0.6s ease-in-out;
}
.event-card {
    flex: 0 0 33.3333%;
    box-sizing: border-box;
    padding: 1rem;
    text-align: center;
}
.event-card img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
}
.event-card h3 {
    margin-top: 0.5rem;
    font-size: 1.5rem;
    color: var(--text-color);
}
.event-card p {
    margin: 0.25rem 0;
    color: #888;
}
.section-divider {
    width: 75%;
    margin: 0 auto 2rem auto;
    border: none;
    border-top: 2px solid var(--text-color);
}


  
</style>

<script>
  const carouselTrack = document.getElementById('eventCarouselTrack');
  let events = [];
  let currentIndex = 0;
  const visibleCount = 3;

  const API_URL = "{{@custom.events_api_url}}";
  const DEFAULT_TAGS = "{{@custom.events_tags}}";
  const AUTH_USER = "{{@custom.events_auth_user}}";
  const AUTH_PASS = "{{@custom.events_auth_pw}}"; // should match hash in users.json

  function createEventCard(event) {
    const thumbUrl = event.thumb_image_url || '/assets/default-thumb.jpg';
    const div = document.createElement('div');
    div.className = 'event-card';
    div.innerHTML = `
      <img src="${thumbUrl}" alt="${event.title}">
      <h3>${event.title}</h3>
      <p>${new Date(event.event_date).toLocaleDateString()}</p>
    `;
    return div;
  }

  function updateCarousel() {
    carouselTrack.innerHTML = '';
    for (let i = 0; i < visibleCount; i++) {
      const index = (currentIndex + i) % events.length;
      carouselTrack.appendChild(createEventCard(events[index]));
    }
  }

  function startCarouselLoop() {
    setInterval(() => {
      currentIndex = (currentIndex + 1) % events.length;
      updateCarousel();
    }, 4000);
  }

function isTokenExpired(token) {
  try {
    const payload = JSON.parse(atob(token.split('.')[1]));
    const expiry = new Date(payload.exp * 1000);
    console.log(`[Auth] Token expires at: ${expiry.toLocaleTimeString()}`);
    return expiry.getTime() < Date.now();
  } catch (err) {
    console.warn('[Auth] Token decode failed');
    return true;
  }
}

async function fetchToken() {
  const storedToken = sessionStorage.getItem('authToken');
  if (storedToken && !isTokenExpired(storedToken)) {
    return storedToken;
  }

  const res = await fetch(`${API_URL}/jwtlogin`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ username: AUTH_USER, password: AUTH_PASS })
  });

  if (!res.ok) throw new Error('Authentication failed');

  const data = await res.json();
  sessionStorage.setItem('authToken', data.token);
  return data.token;
}

  async function loadEvents() {
    try {
      console.log("[Carousel] Authenticating...");
      const token = await fetchToken();

      const logic = "or"; // Could be made dynamic
      const tags = DEFAULT_TAGS.split(',').map(t => t.trim()).filter(Boolean);

      let body = {};
      if (logic === "or") {
        body = { tags, tag_logic: "or" };
      } else {
        body = { tags, tag_logic: "and" };
      }

      console.log(`[Carousel] prefetch: ${token} , ${tags}`);

    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify({
        tags: tags,
        tag_logic: logic
      })
    };  

      console.log(`[Carousel] Fetching events with options:`, options);

      const res = await fetch(`${API_URL}/upcoming-events`, options);

      if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
      events = await res.json();
      console.log(`[Carousel] Events loaded: ${events.length}`);

      if (events.length >= visibleCount) {
        updateCarousel();
        startCarouselLoop();
      } else {
        carouselTrack.innerHTML = '<p style="padding:1rem;">No upcoming events</p>';
      }

    } catch (err) {
      console.error("[Carousel] Error loading events:", err);
      carouselTrack.innerHTML = '<p style="padding:1rem;">Unable to load events</p>';
    }
  }

  loadEvents();
</script>


