<section class="events-carousel">
  <h2 class="gh-section-title" style="text-align: center; margin-bottom: 1.5rem; color: var(--text-color);">
    Upcoming Events
  </h2>
  <hr class="section-divider">
  <a href="{{@site.url}}/events" class="carousel-link-wrapper">
    <div class="carousel-track-container">
      <div class="carousel-track" id="eventCarouselTrack"></div>
    </div>
  </a>

  {{!-- for testing --}}
   <p>{{@custom.events_api_url}}/tags?{{@custom.events_tags}}</p>
</section>

<style>
  .events-carousel {
    overflow: hidden;
    width: 100%;
    max-width: 960px;
    margin: 2rem auto;
  }

  .carousel-link-wrapper {
    display: block;
    text-decoration: none;
    color: inherit;
  }

  .carousel-link-wrapper:hover {
    cursor: pointer;
  }

  .carousel-track-container {
    overflow: hidden;
    position: relative;
  }

  .carousel-track {
    display: flex;
    transition: transform 0.6s ease-in-out;
  }

  .event-card {
    flex: 0 0 33.3333%;
    box-sizing: border-box;
    padding: 1rem;
    text-align: center;
  }

  .event-card img {
    max-width: 100%;
    height: auto;
    border-radius: 8px;
  }

  .event-card h3 {
    margin-top: 0.5rem;
    font-size: 1.5rem;
    color: var(--text-color);
  }

  .event-card p {
    margin: 0.25rem 0;
    color: #888;
  }

  .section-divider {
    width: 75%;
    margin: 0 auto 2rem auto;
    border: none;
    border-top: 2px solid var(--text-color);
  }

  @media (max-width: 768px) {
    .event-card {
      flex: 0 0 100%;
    }
  }

  @media (min-width: 769px) and (max-width: 1024px) {
    .event-card {
      flex: 0 0 50%;
    }
  }
</style>

<script>
  const carouselTrack = document.getElementById('eventCarouselTrack');
  let events = [];
  let currentIndex = 0;
  let visibleCount = 3;

  const API_URL = "{{@custom.events_api_url}}";
  const DEFAULT_TAGS = "{{@custom.events_tags}}";

  const API_URL = "{{@custom.events_api_url}}";
  const TOKEN = "{{@custom.events_token}}";
  const DEFAULT_TAGS = "{{@custom.events_tags}}";

  function createEventCard(event) {
    const thumbUrl = event.thumb_image_url || '/assets/default-thumb.jpg';
    const div = document.createElement('div');
    div.className = 'event-card';
    div.innerHTML = `
      <img src="${thumbUrl}" alt="${event.title}">
      <h3>${event.title}</h3>
      <p>${new Date(event.event_date).toLocaleDateString()}</p>
    `;
    return div;
  }

  function updateCarousel() {
    console.log("[Carousel] Updating display");
    carouselTrack.innerHTML = '';
    for (let i = 0; i < visibleCount; i++) {
      const index = (currentIndex + i) % events.length;
      carouselTrack.appendChild(createEventCard(events[index]));
    }
  }

  function startCarouselLoop() {
    console.log("[Carousel] Starting auto-scroll");
    setInterval(() => {
      currentIndex = (currentIndex + 1) % events.length;
      updateCarousel();
    }, 4000);
  }

async function loadEvents() {
  try {
    const tags = DEFAULT_TAGS
      .split(',')
      .map(t => t.trim())
      .filter(Boolean)
      .join(','); // comma-separated string for query param

    const url = `${API_URL}/events/upcoming?tags=${encodeURIComponent(tags)}`;

    const res = await fetch(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
        // No body for GET
      }
    });

    if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
    events = await res.json();

    if (!events.length) {
      carouselTrack.innerHTML = '<p style="padding:1rem;">No upcoming events</p>';
    } else {
      visibleCount = Math.min(visibleCount, events.length);
      updateCarousel();
      if (events.length > 1) startCarouselLoop();
    }
  } catch (err) {
    console.error("[Carousel] Error loading events:", err);
    carouselTrack.innerHTML = '<p style="padding:1rem;">Unable to load events</p>';
  }
}


  loadEvents();
</script>

