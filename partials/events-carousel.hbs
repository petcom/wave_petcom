<section class="events-carousel">
  <h2 class="gh-section-title" style="text-align: center; margin-bottom: 1.5rem; color: var(--text-color);">
    Upcoming Events
  </h2>
  <hr class="section-divider">

  <a href="{{@site.url}}/events" class="carousel-link-wrapper">
    <div class="carousel-track-container">
      <div class="carousel-track" id="eventCarouselTrack"></div>
    </div>
  </a>

  {{!-- for testing --}}
  <!--
  <p>{{@custom.proxy_api_url}}{{@custom.events_suffix}}?tags={{@custom.events_tags}}</p>
-->
</section>

<script>
  const carouselTrack = document.getElementById('eventCarouselTrack');
  let events = [];

  const API_URL = "{{@custom.proxy_api_url}}{{@custom.events_suffix}}";
  const DEFAULT_TAGS = "{{@custom.events_tags}}";

  // Helper function to parse date as local date (no timezone conversion)
  function parseLocalDate(dateString) {
    if (!dateString) return null;
    
    // If it's just a date (YYYY-MM-DD), treat as date-only
    if (!dateString.includes('T')) {
      const [year, month, day] = dateString.split('-').map(Number);
      return new Date(year, month - 1, day);
    }
    
    // Parse full datetime but as local time
    const [datePart, timePart] = dateString.split('T');
    const [year, month, day] = datePart.split('-').map(Number);
    const timeOnly = timePart.split('Z')[0].split('+')[0]; // Remove timezone info
    const [hour, minute, second] = timeOnly.split(':').map(Number);
    
    return new Date(year, month - 1, day, hour || 0, minute || 0, second || 0);
  }

  // Check if time is meaningful (not midnight)
  function hasSignificantTime(date) {
    return date.getHours() !== 0 || date.getMinutes() !== 0;
  }

  // Format date for carousel display
  function formatCarouselDate(dateString) {
    const date = parseLocalDate(dateString);
    if (!date) return '';
    
    const showTime = hasSignificantTime(date);
    const options = { 
      month: 'short', 
      day: 'numeric',
      year: 'numeric'
    };
    
    if (showTime) {
      options.hour = '2-digit';
      options.minute = '2-digit';
    }
    
    return date.toLocaleDateString('en-US', options);
  }

  function createEventCard(event) {
    const thumbUrl = event.thumb_image_url || '/assets/default-thumb.jpg';
    
    const wrapper = document.createElement('a');
    
    // If event has an ID, link to single event page, otherwise to events page
    if (event.id) {
      wrapper.href = `/event-single/?event-id=${event.id}`;
      wrapper.className = 'event-card clickable-event';
    } else {
      wrapper.href = '/events';
      wrapper.className = 'event-card';
    }
    
    wrapper.innerHTML = `
      <div class="event-media">
        <img src="${thumbUrl}" alt="${event.title || 'Event image'}">
        <h6>${event.title}</h6>
        <p class="event-date">${formatCarouselDate(event.event_date)}</p>
      </div>
    `;
    
    return wrapper;
  }

  function updateCarousel() {
    carouselTrack.innerHTML = '';
    events.forEach(event => {
      carouselTrack.appendChild(createEventCard(event));
    });
  }

  async function loadEvents() {
    try {
      const tags = DEFAULT_TAGS
        .split(',')
        .map(t => t.trim())
        .filter(Boolean);

      const body = {
        tags,
        tag_logic: 'or',
        startDate: new Date().toISOString(),
        endDate: null
      };

      const res = await fetch(API_URL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      });

      if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
      events = await res.json();

      if (!events.length) {
        carouselTrack.innerHTML = '<p style="padding:1rem;">No upcoming events</p>';
      } else {
        updateCarousel();
      }
    } catch (err) {
      console.error("[Carousel] Error loading events:", err);
      carouselTrack.innerHTML = '<p style="padding:1rem;">Unable to load events</p>';
    }
  }

  loadEvents();
</script>
