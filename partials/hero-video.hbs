{{!-- Video Hero Section Partial --}}
<style>
.video-hero {
    position: relative;
    width: 100%;
    height: 70vh;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}

.video-hero .video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

.video-hero video {
    position: absolute;
    top: 50%;
    left: 50%;
    min-width: 100%;
    min-height: 100%;
    width: auto;
    height: auto;
    transform: translate(-50%, -50%);
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

.video-hero video.active {
    opacity: 1;
}

.video-hero .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.1) 100%);
    z-index: 2;
}

.video-hero .video-controls {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    z-index: 4;
    display: flex;
    gap: 0.5rem;
}

.video-hero .video-control-btn {
    background: rgba(0, 0, 0, 0.5);
    border: none;
    color: white;
    padding: 0.5rem;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.2rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
}

.video-hero .video-control-btn:hover {
    background: rgba(122, 113, 113, 0.7);
}

@media (max-width: 768px) {
    .video-hero {
        height: 50vh;
    }
}
</style>

<div class="video-hero">
    <div class="video-container" id="video-container">
        <video class="hero-video-element active" autoplay muted playsinline>
            <source src="{{asset 'media/herovideos/base_salsa_202509.mp4'}}" type="video/mp4">
        </video>
        <video class="hero-video-element" muted playsinline>
            <source src="{{asset 'media/herovideos/base_record_202509.mp4'}}" type="video/mp4">
        </video>
    </div>
    
    <div class="video-overlay"></div>
    
    <div class="hero-overlay"{{#if @custom.hero_text_color}} style="--hero-text-color: {{@custom.hero_text_color}};"{{/if}}>
        {{#get "posts" filter="slug:hero-title" limit="1" formats="html" include="tags"}}
            {{#if posts}}
                {{#foreach posts}}
                        <div class="hero-copy">
                            {{#if feature_image}}
                                <img class="hero-logo" src="{{img_url feature_image size="xs"}}" alt="{{title}}" loading="eager">
                            {{else}}
                                {{#if @site.logo}}
                                    <img class="hero-logo" src="{{@site.logo}}" alt="{{@site.title}}" loading="eager">
                                {{/if}}
                            {{/if}}

                            <h1 class="hero-title">{{title}}</h1>

                            {{#if custom_excerpt}}
                                <p class="hero-subtitle">{{custom_excerpt}}</p>
                            {{/if}}

                            {{#if html}}
                                <div class="hero-actions">
                                    {{{html}}}
                                </div>
                            {{/if}}
                        </div>
                    {{/foreach}}
            {{else}}
                {{#get "pages" filter="slug:hero-title" limit="1" formats="html" include="tags"}}
                    {{#if pages}}
                        {{#foreach pages}}
                                <div class="hero-copy">
                                    {{#if feature_image}}
                                        <img class="hero-logo" src="{{img_url feature_image size="xs"}}" alt="{{title}}" loading="eager">
                                    {{else}}
                                        {{#if @site.logo}}
                                            <img class="hero-logo" src="{{@site.logo}}" alt="{{@site.title}}" loading="eager">
                                        {{/if}}
                                    {{/if}}

                                    <h1 class="hero-title">{{title}}</h1>

                                    {{#if custom_excerpt}}
                                        <p class="hero-subtitle">{{custom_excerpt}}</p>
                                    {{/if}}

                                    {{#if html}}
                                        <div class="hero-actions">
                                            {{{html}}}
                                        </div>
                                    {{/if}}
                                </div>
                        {{/foreach}}
                    {{else}}
                        <div class="hero-copy">
                            {{#if @site.logo}}
                                <img class="hero-logo" src="{{@site.logo}}" alt="{{@site.title}}" loading="eager">
                            {{/if}}

                            <h1 class="hero-title">Make, Move, Create and Code </h1>

                            {{#if @site.description}}
                                <p class="hero-subtitle">{{@site.description}}</p>
                            {{/if}}

                            <div class="hero-actions">
                                <a href="/contact-us" class="btn-hero">Try a Free Intro</a>
                                <a href="/events" class="btn-hero primary">See Schedule</a>
                                <a href="/contact-us" class="btn-hero">Send a Message</a>
                            </div>
                        </div>
                    {{/if}}
                {{/get}}
            {{/if}}
        {{/get}}
    </div>
    
    <div class="video-controls">
        <button class="video-control-btn" id="video-play-pause" aria-label="Play/Pause video">
            <span id="play-pause-icon">‚è∏Ô∏è</span>
        </button>
        <button class="video-control-btn" id="video-mute" aria-label="Mute/Unmute video">
            <span id="mute-icon">üîá</span>
        </button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const videoContainer = document.getElementById('video-container');
    const playPauseBtn = document.getElementById('video-play-pause');
    const playPauseIcon = document.getElementById('play-pause-icon');
    const muteBtn = document.getElementById('video-mute');
    const muteIcon = document.getElementById('mute-icon');
    
    if (!videoContainer) return;
    
    const videos = document.querySelectorAll('.hero-video-element');
    const SWITCH_DELAY = 8000;
    let currentVideoIndex = 0;
    let cycleTimeout = null;
    let isPaused = false;
    let isMuted = true;
    
    // Preload all videos
    videos.forEach((video, index) => {
        video.loop = true;
        video.muted = isMuted;
        if (index > 0) {
            video.load();
        }
        
        video.addEventListener('error', (e) => {
            console.warn(`Video failed to load:`, e);
        });
    });

    function clearScheduledSwitch() {
        if (cycleTimeout) {
            clearTimeout(cycleTimeout);
            cycleTimeout = null;
        }
    }

    function scheduleNextSwitch(delay = SWITCH_DELAY) {
        if (videos.length <= 1) {
            clearScheduledSwitch();
            return;
        }
        clearScheduledSwitch();
        if (isPaused) return;
        cycleTimeout = setTimeout(() => {
            const nextIndex = (currentVideoIndex + 1) % videos.length;
            switchToVideo(nextIndex);
        }, delay);
    }
    
    function beginPlayback() {
        const currentVideo = videos[currentVideoIndex];
        if (!currentVideo) return;

        currentVideo.muted = isMuted;
        currentVideo.loop = true;

        const attemptPlay = () => {
            currentVideo.play().then(() => {
                scheduleNextSwitch();
            }).catch(err => {
                console.warn('Autoplay prevented, waiting for user interaction:', err);
                const resumeOnInteraction = () => {
                    currentVideo.play().then(() => {
                        scheduleNextSwitch();
                    }).catch(e => {
                        console.warn('Playback failed after interaction:', e);
                    });
                document.removeEventListener('click', resumeOnInteraction);
                document.removeEventListener('touchstart', resumeOnInteraction);
                };
                document.addEventListener('click', resumeOnInteraction, { once: true });
                document.addEventListener('touchstart', resumeOnInteraction, { once: true });
            });
        };

        attemptPlay();
    }

    beginPlayback();
    
    function switchToVideo(targetIndex) {
        if (videos.length <= 1) return;

        const currentVideo = videos[currentVideoIndex];
        const nextVideo = videos[targetIndex];

        const performSwitch = () => {
            currentVideo.classList.remove('active');
            currentVideo.pause();

            nextVideo.classList.add('active');
            nextVideo.currentTime = 0;
            nextVideo.muted = isMuted;

            if (!isPaused) {
                nextVideo.play().catch(e => {
                    console.warn('Video autoplay failed:', e);
                });
            }

            currentVideoIndex = targetIndex;
            scheduleNextSwitch();
        };

        if (nextVideo.readyState >= 3) {
            performSwitch();
            return;
        }

        clearScheduledSwitch();
        const onReady = () => {
            nextVideo.removeEventListener('canplaythrough', onReady);
            performSwitch();
        };

        nextVideo.addEventListener('canplaythrough', onReady, { once: true });
        nextVideo.load();

        if (!isPaused) {
            currentVideo.loop = true;
            currentVideo.play().catch(e => {
                console.warn('Video kept playing while buffering next clip failed:', e);
            });
        }
    }
    
    // Play/Pause functionality
    if (playPauseBtn && playPauseIcon) {
        playPauseBtn.addEventListener('click', () => {
            isPaused = !isPaused;
            
            if (isPaused) {
                videos[currentVideoIndex].pause();
                clearScheduledSwitch();
                playPauseIcon.textContent = '‚ñ∂Ô∏è';
            } else {
                videos[currentVideoIndex].play();
                scheduleNextSwitch();
                playPauseIcon.textContent = '‚è∏Ô∏è';
            }
        });
    }
    
    // Mute/Unmute functionality
    if (muteBtn && muteIcon) {
        muteBtn.addEventListener('click', () => {
            isMuted = !isMuted;
            videos.forEach(video => {
                video.muted = isMuted;
            });
            muteIcon.textContent = isMuted ? 'üîá' : 'üîä';
        });
    }
});
</script>