{{!-- Video Hero Section Partial --}}
<style>
.video-hero {
    position: relative;
    width: 100%;
    height: 70vh;
    overflow: hidden;
    display: flex;
    align-items: center;
    justify-content: center;
}

.video-hero .video-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 1;
}

.video-hero video {
    position: absolute;
    top: 50%;
    left: 50%;
    min-width: 100%;
    min-height: 100%;
    width: auto;
    height: auto;
    transform: translate(-50%, -50%);
    opacity: 0;
    transition: opacity 1s ease-in-out;
}

.video-hero video.active {
    opacity: 1;
}

.video-hero .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(0, 0, 0, 0.4) 0%, rgba(0, 0, 0, 0.1) 100%);
    z-index: 2;
}

.video-hero .hero-content {
    position: relative;
    z-index: 3;
    text-align: center;
    color: white;
    max-width: 960px;
    padding: 0 1rem;
}

.video-hero .hero-title {
    font-size: clamp(2rem, 5vw, 4rem);
    font-weight: 700;
    margin-bottom: 1rem;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
}

.video-hero .hero-description {
    font-size: clamp(1rem, 2.5vw, 1.5rem);
    margin-bottom: 2rem;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.7);
}

.video-hero .hero-buttons {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
}

.video-hero .hero-title, .video-hero .hero-description {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    justify-content: center;
    color: white
}

.video-hero .btn-hero {
    background: rgba(255, 255, 255, 0.2);
    border: 2px solid rgba(255, 255, 255, 0.5);
    color: white;
    padding: 0.75rem 1.5rem;
    text-decoration: none;
    border-radius: 6px;
    font-weight: 600;
    transition: all 0.3s ease;
    backdrop-filter: blur(10px);
}

.video-hero .btn-hero:hover {
    background: rgba(255, 255, 255, 0.3);
    border-color: rgba(255, 255, 255, 0.8);
    transform: translateY(-3px);
    filter: brightness(1.2);
}

.video-hero .btn-hero.primary {
    background: var(--link-color);
    border: 2px solid var(--link-color);
    color: white;
}

.video-hero .btn-hero.primary:hover {
    background: var(--link-color);
    border-color: var(--link-color);
    transform: translateY(-3px);
    filter: brightness(1.2);
}

.video-hero .video-controls {
    position: absolute;
    bottom: 1rem;
    right: 1rem;
    z-index: 4;
    display: flex;
    gap: 0.5rem;
}

.video-hero .video-control-btn {
    background: rgba(0, 0, 0, 0.5);
    border: none;
    color: white;
    padding: 0.5rem;
    border-radius: 50%;
    cursor: pointer;
    font-size: 1.2rem;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background 0.3s ease;
}

.video-hero .video-control-btn:hover {
    background: rgba(122, 113, 113, 0.7);
}

@media (max-width: 768px) {
    .video-hero {
        height: 50vh;
    }
    
    .video-hero .hero-buttons {
        flex-direction: column;
        align-items: center;
        
    }
    
    .video-hero .btn-hero {
        width: 80%;
        text-align: center;
    }
}
</style>

<div class="video-hero">
    <div class="video-container" id="video-container">
        <video class="hero-video-element active" autoplay muted playsinline>
            <source src="{{asset "media/herovideos/base_salsa_202509.mp4"}}" type="video/mp4">
        </video>
        <video class="hero-video-element" muted playsinline>
            <source src="{{asset "media/herovideos/base_record_202509.mp4"}}" type="video/mp4">
        </video>
    </div>
    
    <div class="video-overlay"></div>
    
    <div class="hero-content">
        {{#if @site.logo}}
            <img class="cover-logo" src="{{@site.logo}}" alt="{{@site.title}}" style="max-height: 80px; margin-bottom: 1rem;">
        {{/if}}
         {{!-- Video Hero Section Partial
                 <h1 class="hero-title">{{@site.title}}</h1>

        --}}
      
        <h1 class="hero-title">Make, Move, Create and Code </h1>
        
        {{#if @site.description}}
            <p class="hero-description">{{@site.description}}</p>
        {{/if}}
        
        <div class="hero-buttons">
            <a href="/explore-experiences" class="btn-hero">Try a Free Intro</a>
            <a href="/events" class="btn-hero primary">See Schedule</a>
            <a href="/contact-us" class="btn-hero">Send a Message</a>
        </div>
    </div>
    
    <div class="video-controls">
        <button class="video-control-btn" id="video-play-pause" aria-label="Play/Pause video">
            <span id="play-pause-icon">‚è∏Ô∏è</span>
        </button>
        <button class="video-control-btn" id="video-mute" aria-label="Mute/Unmute video">
            <span id="mute-icon">üîá</span>
        </button>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const videoContainer = document.getElementById('video-container');
    const playPauseBtn = document.getElementById('video-play-pause');
    const playPauseIcon = document.getElementById('play-pause-icon');
    const muteBtn = document.getElementById('video-mute');
    const muteIcon = document.getElementById('mute-icon');
    
    if (!videoContainer) return;
    
    const videos = document.querySelectorAll('.hero-video-element');
    let currentVideoIndex = 0;
    let cycleInterval = null;
    let isPaused = false;
    let isMuted = true;
    
    // Preload all videos
    videos.forEach((video, index) => {
        if (index > 0) {
            video.load();
        }
        
        video.addEventListener('error', (e) => {
            console.warn(`Video failed to load:`, e);
        });
    });
    
    // Start cycling after user interaction to avoid autoplay policy violations
    const enableAutoplay = () => {
        startCycling(8000); // 8 seconds
        document.removeEventListener('click', enableAutoplay);
        document.removeEventListener('touchstart', enableAutoplay);
    };
    
    document.addEventListener('click', enableAutoplay, { once: true });
    document.addEventListener('touchstart', enableAutoplay, { once: true });
    
    function switchToNextVideo() {
        if (videos.length <= 1) return;
        
        // Fade out current video
        videos[currentVideoIndex].classList.remove('active');
        videos[currentVideoIndex].pause();
        
        // Move to next video
        currentVideoIndex = (currentVideoIndex + 1) % videos.length;
        
        // Fade in new video
        videos[currentVideoIndex].classList.add('active');
        videos[currentVideoIndex].currentTime = 0;
        if (!isPaused) {
            videos[currentVideoIndex].play().catch(e => {
                console.warn('Video autoplay failed:', e);
            });
        }
    }
    
    function startCycling(duration = 8000) {
        if (cycleInterval) clearInterval(cycleInterval);
        cycleInterval = setInterval(switchToNextVideo, duration);
    }
    
    function stopCycling() {
        if (cycleInterval) {
            clearInterval(cycleInterval);
            cycleInterval = null;
        }
    }
    
    // Play/Pause functionality
    if (playPauseBtn && playPauseIcon) {
        playPauseBtn.addEventListener('click', () => {
            isPaused = !isPaused;
            
            if (isPaused) {
                videos[currentVideoIndex].pause();
                stopCycling();
                playPauseIcon.textContent = '‚ñ∂Ô∏è';
            } else {
                videos[currentVideoIndex].play();
                startCycling();
                playPauseIcon.textContent = '‚è∏Ô∏è';
            }
        });
    }
    
    // Mute/Unmute functionality
    if (muteBtn && muteIcon) {
        muteBtn.addEventListener('click', () => {
            isMuted = !isMuted;
            videos.forEach(video => {
                video.muted = isMuted;
            });
            muteIcon.textContent = isMuted ? 'üîá' : 'üîä';
        });
    }
});
</script>