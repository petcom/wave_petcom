{{!< default}}

<main class="gh-main">
  <section class="gh-container events-wrapper">

    <div class="tag-filter">
      <label for="tagInput"><strong>Filter by tag:</strong></label>
      <input type="text" id="tagInput" placeholder="e.g., workshop" />
      <button id="tagFilterBtn" class="range-toggle-btn">Apply Filter</button>
      <button id="allDatesBtn" class="range-toggle-btn">Show All Dates</button>
    </div>

    <h1 class="gh-page-title">Upcoming Events</h1>
    <div id="events-container" class="gh-feed"></div>

  </section>
</main>


<script>
  // Use dynamic tags and API URL from Ghost custom fields
  const DEFAULT_TAGS = "{{@custom.events_tags}}" || "signal-9,sonar,public";
  const EVENTS_API_URL = "{{@custom.proxy_api_url}}{{@custom.events_suffix}}" || "http://localhost:8180/proxy-api/events/query";

  // Helper function to parse date as local date (no timezone conversion)
  function parseLocalDate(dateString) {
    if (!dateString) return null;
    
    // If it's just a date (YYYY-MM-DD), treat as date-only
    if (!dateString.includes('T')) {
      const [year, month, day] = dateString.split('-').map(Number);
      return new Date(year, month - 1, day);
    }
    
    // Parse full datetime but as local time
    const [datePart, timePart] = dateString.split('T');
    const [year, month, day] = datePart.split('-').map(Number);
    const timeOnly = timePart.split('Z')[0].split('+')[0]; // Remove timezone info
    const [hour, minute, second] = timeOnly.split(':').map(Number);
    
    return new Date(year, month - 1, day, hour || 0, minute || 0, second || 0);
  }

  // Check if time is meaningful (not midnight)
  function hasSignificantTime(date) {
    return date.getHours() !== 0 || date.getMinutes() !== 0;
  }

  // Format date for events page display
  function formatEventDate(dateString) {
    const date = parseLocalDate(dateString);
    if (!date) return '';
    
    const showTime = hasSignificantTime(date);
    const options = {};
    
    if (showTime) {
      options.year = 'numeric';
      options.month = 'short';
      options.day = 'numeric';
      options.hour = '2-digit';
      options.minute = '2-digit';
    } else {
      options.year = 'numeric';
      options.month = 'short';
      options.day = 'numeric';
    }
    
    return date.toLocaleDateString('en-US', options);
  }

  // Function to get URL parameters
  function getUrlParams() {
    const urlParams = new URLSearchParams(window.location.search);
    return {
      tags: urlParams.get('tags') || '',
      daysOut: urlParams.get('daysOut') || null
    };
  }

  function getDateRange(daysOut) {
    const now = new Date();
    const future = new Date();
    future.setDate(now.getDate() + daysOut);
    return {
      start: now.toISOString().split('T')[0],
      end: future.toISOString().split('T')[0]
    };
  }

  async function loadEvents(tagCsv = "", daysOut) {
    try {
      const tags = tagCsv.split(',').map(t => t.trim()).filter(Boolean);
      const body = {
        tags,
        tag_logic: "or"
      };

      if (daysOut) {
        const { start, end } = getDateRange(daysOut);
        body.startDate = start;
        body.endDate = end;
      }

      console.log("Posting to:", EVENTS_API_URL, "with body:", body);

      const container = document.getElementById("events-container");
      container.innerHTML = "<p>Loading events...</p>";

      const res = await fetch(EVENTS_API_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      });

      if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
      const events = await res.json();
      container.innerHTML = "";

      if (!events.length) {
        container.innerHTML = "<p>No events found for the selected filters.</p>";
        return;
      }

      events.forEach((event, index) => {
        const isEven = index % 2 === 0;
        const card = document.createElement("article");
        card.className = `event-card ${isEven ? "event-left" : "event-right"}`;
        
        // Make the entire card clickable if event has an ID
        if (event.id) {
          card.style.cursor = 'pointer';
          card.addEventListener('click', (e) => {
            // Prevent navigation if clicking on a link
            if (e.target.tagName === 'A') return;
            window.location.href = `/event-single/?event-id=${event.id}`;
          });
          
          // Add hover effect
          card.addEventListener('mouseenter', () => {
            card.style.transform = 'translateY(-2px)';
            card.style.transition = 'transform 0.2s ease';
          });
          
          card.addEventListener('mouseleave', () => {
            card.style.transform = 'translateY(0)';
          });
        }

        const thumbUrl = event.thumb_image_url || "/assets/default-thumb.jpg";

        const thumbDiv = document.createElement("div");
        thumbDiv.className = "event-thumbnail";
        thumbDiv.innerHTML = `<img src="${thumbUrl}" alt="Event Thumbnail">`;

        const contentDiv = document.createElement("div");
        contentDiv.className = `event-content ${isEven ? "event-content-left" : "event-content-right"}`;
        contentDiv.innerHTML = `
          <h2>${event.title}</h2>
          <time datetime="${event.event_date}">${formatEventDate(event.event_date)}</time>
          <p>${event.description}</p>
          ${event.tags?.length ? `<div class="event-tags-container">${event.tags.map(tag => `<span class="event-tag">${tag}</span>`).join('')}</div>` : ""}
          ${event.id ? `<p><span class="event-click-hint">Click anywhere to view details â†’</span></p>` : ""}
        `;

        if (isEven) {
          card.appendChild(contentDiv);
          card.appendChild(thumbDiv);
        } else {
          card.appendChild(thumbDiv);
          card.appendChild(contentDiv);
        }

        container.appendChild(card);
      });

    } catch (err) {
      console.error("[Events] Error loading events:", err);
      document.getElementById("events-container").innerHTML = `<p>Error loading events. Please try again later.</p>`;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Get URL parameters
    const urlParams = getUrlParams();
    
    // Use URL tags if provided, otherwise use default
    const initialTags = urlParams.tags || DEFAULT_TAGS;
    const initialDaysOut = urlParams.daysOut ? parseInt(urlParams.daysOut) : 180;
    
    // Set the input field and load events
    document.getElementById("tagInput").value = initialTags;
    loadEvents(initialTags, initialDaysOut);

    document.getElementById("tagFilterBtn").addEventListener("click", () => {
      loadEvents(document.getElementById("tagInput").value.trim(), 180);
    });

    document.getElementById("allDatesBtn").addEventListener("click", () => {
      loadEvents(document.getElementById("tagInput").value.trim(), 1440);
    });
  });
</script>

