{{!< default}}

<main class="gh-main">
  <section class="gh-container events-wrapper">

    <div class="tag-filter" style="margin-bottom: 1.5rem;">
      <label for="tagInput"><strong>Filter by tag:</strong></label>
      <input type="text" id="tagInput" placeholder="e.g., workshop" />
      <button id="tagFilterBtn">Apply Filter</button>
      <button id="sixMonthBtn" class="range-toggle-btn" style="margin-left: 1rem;">Show 6-Month View</button>
      <button id="allDatesBtn" class="range-toggle-btn" style="margin-left: 1rem;">All Dates</button>
    </div>

    <h1 class="gh-page-title">Upcoming Events</h1>
    <div id="events-container" class="gh-feed"></div>

  </section>
</main>

<style>
  .gh-page-title {
    color: var(--accent-color);
  }

  .events-wrapper {
    padding-left: 4rem;
    padding-right: 4rem;
  }

  #events-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem 0;
  }

  .event-card {
    display: flex;
    flex-direction: row;
    gap: 1.5rem;
    background-color: rgba(255, 255, 255, 0.05);
    padding: 1.5rem 2rem;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    align-items: center;
  }

  .event-left {
    border-left: 4px solid var(--accent-color);
  }

  .event-right {
    border-right: 4px solid var(--accent-color);
  }

  .event-thumbnail {
    flex: 0 0 150px;
    height: 150px;
    overflow: hidden;
    border-radius: 8px;
  }

  .event-thumbnail img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
    border-radius: 4px;
  }

  .event-content {
    flex: 1;
    display: flex;
    flex-direction: column;
  }

  .event-content-left {
    text-align: left;
    align-items: flex-start;
  }

  .event-content-right {
    text-align: right;
    align-items: flex-end;
  }

  .event-content h2 {
    margin: 0 0 0.3rem;
    font-size: 1.8rem;
    color: var(--accent-color);
  }

  .event-content time {
    font-size: 1.2rem;
    font-weight: 600;
    color: inherit;
    opacity: 0.85;
    margin-bottom: 1rem;
  }

  .event-content p {
    margin-bottom: 0.5rem;
  }

  .event-content strong {
    font-weight: 600;
  }

  .range-toggle-btn {
    background-color: transparent;
    border: 1px solid var(--accent-color);
    color: var(--accent-color);
    padding: 0.4rem 1rem;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.2s;
  }

  .range-toggle-btn.active {
    background-color: var(--accent-color);
    color: white;
  }
</style>

<script>
  const DEFAULT_TAGS = "{{@custom.events_tags}}";
<<<<<<< HEAD
  const API_URL = "{{@custom.events_api_url}}"; // e.g. https://yourdomain.com/proxy-api
=======
  const API_URL = "{{@custom.events_api_url}}";
<<<<<<< HEAD
  const TOKEN = "{{@custom.events_token}}";
>>>>>>> ec15e82e (fixed thumb_image_url)
=======
  const AUTH_USER = "{{@custom.events_auth_user}}";
  const AUTH_PASS = "{{@custom.events_auth_pw}}";
>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)

  function getDateRange(daysOut) {
    const now = new Date();
    const future = new Date();
    future.setDate(now.getDate() + daysOut);
    return {
      start: now.toISOString().split('T')[0],
      end: future.toISOString().split('T')[0]
    };
  }

  function isTokenExpired(token) {
    try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
    } catch {
      return true;
    }
  }

  async function fetchToken() {
    const storedToken = sessionStorage.getItem('authToken');
    if (storedToken && !isTokenExpired(storedToken)) {
      return storedToken;
    }

    const res = await fetch(`${API_URL}/jwtlogin`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ username: AUTH_USER, password: AUTH_PASS })
    });

    if (!res.ok) throw new Error('Authentication failed');

    const data = await res.json();
    sessionStorage.setItem('authToken', data.token);
    return data.token;
  }

  async function loadEvents(tagCsv = "", daysOut) {
    try {
<<<<<<< HEAD
<<<<<<< HEAD
      console.log("[Events] Loading events...");
      const tags = tagCsv.split(',').map(t => t.trim()).filter(Boolean);
      const body = {
        tags,
        tag_logic: "or"
      };

      if (daysOut) {
        const { start, end } = getDateRange(daysOut);
        body.startDate = start;
        body.endDate = end;
      }

      const res = await fetch(`${API_URL}/events/query`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(body)
      });

      const container = document.getElementById("events-container");
      container.innerHTML = "<p>Loading events...</p>";

      if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
      const events = await res.json();
      container.innerHTML = "";

      if (!events.length) {
=======
      console.log("[Events] Starting event load...");
      const url = new URL(`${API_URL}/events`);
      url.searchParams.append("token", TOKEN);

      const logic = document.getElementById("tagLogicSelect")?.value || "or";
=======
      console.log("[Events] Loading events...");
      const token = await fetchToken();
      const logic = "or"; // could be made dynamic
>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)
      const tags = tagCsv.split(',').map(t => t.trim()).filter(Boolean);
      const dateRange = daysOut ? getDateRange(daysOut) : null;

      const body = {
        tags,
        tag_logic: logic
      };

      if (dateRange) {
        body.startDate = dateRange.start;
        body.endDate = dateRange.end;
      }

      const options = {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(body)
      };

      const container = document.getElementById("events-container");
      container.innerHTML = "<p>Loading events...</p>";

      const res = await fetch(`${API_URL}/events`, options);
      if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);

      const events = await res.json();
      container.innerHTML = "";

<<<<<<< HEAD
      if (events.length === 0) {
        console.log("[Events] No events found for current filters.");
>>>>>>> ec15e82e (fixed thumb_image_url)
=======
      if (!events.length) {
>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)
        container.innerHTML = "<p>No events found for the selected filters.</p>";
        return;
      }

      events.forEach((event, index) => {
<<<<<<< HEAD
<<<<<<< HEAD
=======
        console.log(`[Events] Rendering event: ${event.title} (${event.id})`);
=======
>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)
        const card = document.createElement("article");
>>>>>>> ec15e82e (fixed thumb_image_url)
        const isEven = index % 2 === 0;
        const card = document.createElement("article");
        card.className = `event-card ${isEven ? "event-left" : "event-right"}`;

<<<<<<< HEAD
<<<<<<< HEAD
        const thumbUrl = event.thumb_image_url || "/assets/default-thumb.jpg";
=======
        const thumbUrl = event.thumb_url || "/assets/default-thumb.jpg";
        console.log(`[Events] Using thumbnail: ${thumbUrl}`);
>>>>>>> ec15e82e (fixed thumb_image_url)
=======
        const thumbUrl = event.thumb_image_url || "/assets/default-thumb.jpg";
>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)

        const thumbDiv = document.createElement("div");
        thumbDiv.className = "event-thumbnail";
        thumbDiv.innerHTML = `<img src="${thumbUrl}" alt="Event Thumbnail">`;

        const contentDiv = document.createElement("div");
        contentDiv.className = `event-content ${isEven ? "event-content-left" : "event-content-right"}`;
        contentDiv.innerHTML = `
          <h2>${event.title}</h2>
          <time datetime="${event.event_date}">${new Date(event.event_date).toLocaleDateString()}</time>
          <p>${event.description}</p>
          ${event.tags?.length ? `<p><strong>Tags:</strong> ${event.tags.join(", ")}</p>` : ""}
          ${event.group_id ? `<p><strong>Group:</strong> ${event.group_id}</p>` : ""}
        `;

        if (isEven) {
          card.appendChild(contentDiv);
          card.appendChild(thumbDiv);
        } else {
          card.appendChild(thumbDiv);
          card.appendChild(contentDiv);
        }

        container.appendChild(card);
      });

    } catch (err) {
      console.error("[Events] Error loading events:", err);
      document.getElementById("events-container").innerHTML = `<p>Error loading events. Please try again later.</p>`;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
<<<<<<< HEAD
=======
    console.log("[Events] DOM ready.");
>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)
    document.getElementById("tagInput").value = DEFAULT_TAGS;
    loadEvents(DEFAULT_TAGS, 14);

    document.getElementById("tagFilterBtn").addEventListener("click", () => {
<<<<<<< HEAD
      loadEvents(document.getElementById("tagInput").value.trim(), 14);
    });

    document.getElementById("sixMonthBtn").addEventListener("click", () => {
      loadEvents(document.getElementById("tagInput").value.trim(), 180);
    });

    document.getElementById("allDatesBtn").addEventListener("click", () => {
      loadEvents(document.getElementById("tagInput").value.trim(), 1440);
    });
  });
</script>
=======
      const tag = document.getElementById("tagInput").value.trim();
      loadEvents(tag, 14);
    });

    document.getElementById("sixMonthBtn").addEventListener("click", () => {
      const tag = document.getElementById("tagInput").value.trim();
      loadEvents(tag, 180);
    });

    document.getElementById("allDatesBtn").addEventListener("click", () => {
      const tag = document.getElementById("tagInput").value.trim();
      loadEvents(tag, 1440);
    });
  });
</script>







>>>>>>> 890b7a2a (--fixed thumb-image-url and post logic)
